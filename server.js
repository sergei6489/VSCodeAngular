"use strict";
var express = require('express');
var path = require('path');
var port = process.env.PORT || 3000;
var app = express();
app.use('/app', express.static(path.resolve(__dirname, 'app')));
app.use('/node_modules', express.static(path.resolve(__dirname, 'node_modules')));
var renderIndex = function (req, res) {
    res.sendFile(path.resolve(__dirname, 'index.html'));
};
app.get('/*', renderIndex);
var server = app.listen(port, function () {
    var host = server.address().address;
    var port = server.address().port;
    console.log('This express app is listening on port:' + port);
});



"use strict";
var express = require('express');
var router = express.Router();
router.get('/', function (req, res) {
    res.setHeader('Content-Type', 'application/json');
    res.send(JSON.stringify({ a: 1 }));
});

"use strict";
var Shipment = (function () {
    function Shipment(id, from, to, dateTimeOut, dateTimeInput, places, price) {
        this.id = id;
        this.from = from;
        this.to = to;
        this.dateTimeOut = dateTimeOut;
        this.dateTimeInput = dateTimeInput;
        this.places = places;
        this.price = price;
    }
    return Shipment;
}());
exports.Shipment = Shipment;
var Direction = (function () {
    function Direction(from, to) {
        this.from = from;
        this.to = to;
    }
    return Direction;
}());
exports.Direction = Direction;

"use strict";
var PagerShipmentsViewModel = (function () {
    function PagerShipmentsViewModel() {
    }
    return PagerShipmentsViewModel;
}());
exports.PagerShipmentsViewModel = PagerShipmentsViewModel;

"use strict";
var SearchViewModel = (function () {
    function SearchViewModel() {
    }
    return SearchViewModel;
}());
exports.SearchViewModel = SearchViewModel;

"use strict";

"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ShipmentViewModel_1 = require("../dataModels/ShipmentViewModel");
var MockShipmentService = (function (_super) {
    __extends(MockShipmentService, _super);
    function MockShipmentService() {
        _super.call(this);
    }
    MockShipmentService.prototype.GetShipments = function (search) {
        var numbers = new Array();
        while (numbers.length < 50) {
            numbers.push(numbers.length + 1);
        }
        var data = new Array();
        data.push(new ShipmentViewModel_1.Shipment(1, "NewYork", "Bagdad", new Date(), new Date(), numbers, 350));
        return data;
    };
    MockShipmentService.prototype.GetShipment = function (id) {
        return null;
    };
    return MockShipmentService;
}(IShipmentService));
exports.MockShipmentService = MockShipmentService;

"use strict";
var ShipmentService = (function () {
    function ShipmentService() {
    }
    return ShipmentService;
}());
exports.ShipmentService = ShipmentService;

//# sourceMappingURL=data:application/json;base64,
